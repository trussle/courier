// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/courier/pkg/queue (interfaces: Queue)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/trussle/courier/pkg/models"
	queue "github.com/trussle/courier/pkg/queue"
	reflect "reflect"
)

// MockQueue is a mock of Queue interface
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockQueue) Commit(arg0 models.Transaction) (queue.Result, error) {
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(queue.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit
func (mr *MockQueueMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockQueue)(nil).Commit), arg0)
}

// Dequeue mocks base method
func (m *MockQueue) Dequeue() <-chan models.Record {
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(<-chan models.Record)
	return ret0
}

// Dequeue indicates an expected call of Dequeue
func (mr *MockQueueMockRecorder) Dequeue() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockQueue)(nil).Dequeue))
}

// Enqueue mocks base method
func (m *MockQueue) Enqueue(arg0 models.Record) error {
	ret := m.ctrl.Call(m, "Enqueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue
func (mr *MockQueueMockRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueue)(nil).Enqueue), arg0)
}

// Failed mocks base method
func (m *MockQueue) Failed(arg0 models.Transaction) (queue.Result, error) {
	ret := m.ctrl.Call(m, "Failed", arg0)
	ret0, _ := ret[0].(queue.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Failed indicates an expected call of Failed
func (mr *MockQueueMockRecorder) Failed(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockQueue)(nil).Failed), arg0)
}

// Run mocks base method
func (m *MockQueue) Run() {
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockQueueMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockQueue)(nil).Run))
}

// Stop mocks base method
func (m *MockQueue) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockQueueMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockQueue)(nil).Stop))
}
